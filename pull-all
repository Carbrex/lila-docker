#!/bin/bash -e

cd "$(dirname "$0")"
initial_dir=$(pwd)

# Check if --pull flag is passed
pull_flag=false
if [[ $1 == "--pull" ]]; then
    pull_flag=true
fi

for dir in ./repos/*; do
    # echo "Checking $dir"
    if [[ -d "$dir" ]]; then
        cd "$dir"

        # Format the directory name
        dir=$(printf "%-20s" "$dir")

        # check if the directory is a git repo
        if [[ ! -d ".git" ]]; then
            # echo "$dir : not a git repo."
            cd "$initial_dir"
            continue
        fi
        # check if the git repo is dirty
        if [[ $(git diff --stat) != '' ]]; then
            echo "$dir : repo has uncommitted changes."
            cd "$initial_dir"
            continue
        fi
        # check if repo has a main branch or master branch
        main_or_master=""
        if [[ $(git branch --list main) ]]; then
            main_or_master="main"
        elif [[ $(git branch --list master) ]]; then
            main_or_master="master"
        else
            echo "$dir : doesn't have a main or master branch."
            cd "$initial_dir"
            continue
        fi

        git fetch upstream "$main_or_master" 2>/dev/null

        # if repo is not on main or master branch, don't do anything
        if [[ $(git branch --show-current) != "$main_or_master" ]]; then
            echo "$dir : not on $main_or_master branch."
            cd "$initial_dir"
            continue
        fi
        # check if repo is up to date
        if [[ $(git rev-list HEAD...upstream/$main_or_master --count) -eq 0 ]]; then
            echo "$dir : up to date."
            cd "$initial_dir"
            continue
        fi

        if [[ $pull_flag == true ]]; then
            echo "$dir : pulling changes."
            git pull 2>/dev/null
        else 
            echo "$dir : is behind by $(git rev-list HEAD...upstream/$main_or_master --count) commits."
        fi
        
        cd "$initial_dir"
    fi
done
